{
  "info": {
    "name": "Movies API – Local & Render (Expanded Tests)",
    "_postman_id": "3e6d9b3a-3c2a-4de1-b0d3-aaaabbbbcccc",
    "description": "Enhanced tests for Movies API with complete endpoint coverage for filters, pagination, metadata, and error handling. Supports both Local and Render environments with variable base URLs.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    { "key": "baseUrl_local", "value": "http://localhost:8000/api" },
    { "key": "baseUrl_render", "value": "https://dataset-web-api.onrender.com/api" },
    { "key": "baseUrl", "value": "http://localhost:8000/api" }
  ],
  "item": [
    {
      "name": "Movies Page – Filter by Year Range and Genre",
      "request": {
        "method": "GET",
        "url": {
          "raw": "{{baseUrl}}/movies/page?page=1&limit=5&yearStart=2010&yearEnd=2020&genre=Action",
          "host": ["{{baseUrl}}"],
          "path": ["movies", "page"],
          "query": [
            { "key": "page", "value": "1" },
            { "key": "limit", "value": "5" },
            { "key": "yearStart", "value": "2010" },
            { "key": "yearEnd", "value": "2020" },
            { "key": "genre", "value": "Action" }
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status is 200', () => pm.response.to.have.status(200));",
              "const json = pm.response.json();",
              "pm.expect(json.success).to.be.true;",
              "pm.expect(json.data).to.be.an('array');",
              "if (json.data.length > 0) {",
              "  const y = new Date(json.data[0].release_date).getFullYear();",
              "  pm.expect(y).to.be.within(2010, 2020);",
              "  pm.expect(json.data[0].genres).to.include('Action');",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Movies Page – Filter by Budget and Revenue",
      "request": {
        "method": "GET",
        "url": {
          "raw": "{{baseUrl}}/movies/page?budgetLow=1000000&budgetHigh=50000000&revenueLow=5000000&revenueHigh=300000000",
          "host": ["{{baseUrl}}"],
          "path": ["movies", "page"],
          "query": [
            { "key": "budgetMin", "value": "1000000" },
            { "key": "budgetMax", "value": "50000000" },
            { "key": "revenueMin", "value": "5000000" },
            { "key": "revenueMax", "value": "300000000" }
          ]
        }
      },
      "event": [
      {
        "listen": "test",
        "script": {
          "exec": [
            "pm.test('Status is 200', () => pm.response.to.have.status(200));",
            "const json = pm.response.json();",
            "pm.expect(json.success).to.be.true;",
            "json.data.forEach(m => {",
            "  const budget = typeof m.budget === 'string' ? parseFloat(m.budget) : m.budget;",
            "  const revenue = typeof m.revenue === 'string' ? parseFloat(m.revenue) : m.revenue;",
            "  pm.expect(budget).to.be.a('number');",
            "  pm.expect(budget).to.be.within(1000000, 50000000);",
            "  pm.expect(revenue).to.be.a('number');",
            "  pm.expect(revenue).to.be.within(5000000, 300000000);",
            "});"
          ],
          "type": "text/javascript"
        }
      }
    ]

    },
    {
      "name": "Movies Page – Filter by Runtime and MPA Rating",
      "request": {
        "method": "GET",
        "url": {
          "raw": "{{baseUrl}}/movies/page?runtimeMin=80&runtimeMax=120&mpaRating=PG-13",
          "host": ["{{baseUrl}}"],
          "path": ["movies", "page"],
          "query": [
            { "key": "runtimeMin", "value": "80" },
            { "key": "runtimeMax", "value": "120" },
            { "key": "mpaRating", "value": "PG-13" }
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status is 200', () => pm.response.to.have.status(200));",
              "const json = pm.response.json();",
              "pm.expect(json.success).to.be.true;",
              "json.data.forEach(m => {",
              "  if (m.runtime_min) pm.expect(m.runtime_min).to.be.within(80, 120);",
              "  pm.expect(m.mpa_rating).to.eql('PG-13');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Movies Page – Filter by Studios, Producers, and Directors",
      "request": {
        "method": "GET",
        "url": {
          "raw": "{{baseUrl}}/movies/page?studios=Warner%20Bros&producers=Emma%20Thomas&directors=Christopher%20Nolan",
          "host": ["{{baseUrl}}"],
          "path": ["movies", "page"],
          "query": [
            { "key": "studios", "value": "Warner Bros" },
            { "key": "producers", "value": "Emma Thomas" },
            { "key": "directors", "value": "Christopher Nolan" }
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status is 200', () => pm.response.to.have.status(200));",
              "const json = pm.response.json();",
              "pm.expect(json.success).to.be.true;",
              "json.data.forEach(m => {",
              "  pm.expect(m.studios.join(',').toLowerCase()).to.include('warner');",
              "  pm.expect(m.directors.join(',').toLowerCase()).to.include('nolan');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Movies Page – Filter by Collection and Actors",
      "request": {
        "method": "GET",
        "url": {
          "raw": "{{baseUrl}}/movies/page?collection=The%20Dark%20Knight%20Collection&actorNames=Christian%20Bale,Heath%20Ledger",
          "host": ["{{baseUrl}}"],
          "path": ["movies", "page"],
          "query": [
            { "key": "collection", "value": "The Dark Knight Collection" },
            { "key": "actorNames", "value": "Christian Bale,Heath Ledger" }
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status is 200', () => pm.response.to.have.status(200));",
              "const json = pm.response.json();",
              "pm.expect(json.success).to.be.true;",
              "let found = false;",
              "json.data.forEach(m => {",
              "  const names = m.actors.map(a => a.name.toLowerCase());",
              "  if (names.some(n => n.includes('christian bale') || n.includes('heath ledger'))) found = true;",
              "});",
              "pm.expect(found).to.be.true;"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Movies Page – Filter by Studio Logos and Countries",
      "request": {
        "method": "GET",
        "url": {
          "raw": "{{baseUrl}}/movies/page?studioLogos=logo&studioCountries=United%20States",
          "host": ["{{baseUrl}}"],
          "path": ["movies", "page"],
          "query": [
            { "key": "studioLogos", "value": "logo" },
            { "key": "studioCountries", "value": "United States" }
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status is 200', () => pm.response.to.have.status(200));",
              "const json = pm.response.json();",
              "pm.expect(json.success).to.be.true;",
              "json.data.forEach(m => pm.expect(m.studio_countries.join(',').toLowerCase()).to.include('united states'));"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Movies Page – Combined Multi-Filter Scenario",
      "request": {
        "method": "GET",
        "url": {
          "raw": "{{baseUrl}}/movies/page?yearStart=2008&yearEnd=2012&genre=Action&directors=Christopher%20Nolan&actorNames=Christian%20Bale",
          "host": ["{{baseUrl}}"],
          "path": ["movies", "page"],
          "query": [
            { "key": "yearStart", "value": "2008" },
            { "key": "yearEnd", "value": "2012" },
            { "key": "genre", "value": "Action" },
            { "key": "directors", "value": "Christopher Nolan" },
            { "key": "actorNames", "value": "Christian Bale" }
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status is 200', () => pm.response.to.have.status(200));",
              "const json = pm.response.json();",
              "pm.expect(json.success).to.be.true;",
              "json.data.forEach(m => {",
              "  const y = new Date(m.release_date).getFullYear();",
              "  pm.expect(y).to.be.within(2008, 2012);",
              "  pm.expect(m.genres).to.include('Action');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    }
  ]
}
