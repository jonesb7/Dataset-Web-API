openapi: 3.0.3
info:
  title: Movies API
  version: 1.0.0
  description: |
    API for movies from the last 30 years.
    Provides routes for listing, retrieving, and analyzing movies.
    Supports filtering, pagination, and statistics grouped by year or genre.

servers:
  - url: https://dataset-web-api.onrender.com/api
    description: Render (production)
  - url: http://localhost:8000/api
    description: Local development

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key



  schemas:
    MovieInput:
      description: Input payload for creating/updating a movie. Same as Movie without movie_id.
      type: object
      required: [ title ]
      properties:
        title: { type: string }
        original_title: { type: string, nullable: true }
        release_date: { type: string, format: date, nullable: true }
        runtime: { type: integer, nullable: true }
        genres: { type: string, nullable: true }
        overview: { type: string, nullable: true }
        budget: { type: integer, nullable: true }
        revenue: { type: integer, nullable: true }
        mpa_rating: { type: string, nullable: true }
        country: { type: string, nullable: true }
    Movie:
      type: object
      required: [movie_id, title]
      properties:
        movie_id:
          type: integer
          example: 101
        title:
          type: string
          example: "Inception"
        original_title:
          type: string
          nullable: true
          example: "Inception"
        release_date:
          type: string
          format: date
          example: "2010-07-16"
        runtime:
          type: integer
          example: 148
          description: "minutes"
        genres:
          type: string
          description: Semicolon-separated list of genres
          example: "Science Fiction; Thriller"
        overview:
          type: string
          nullable: true
        budget:
          type: integer
          nullable: true
          example: 160000000
        revenue:
          type: integer
          nullable: true
          example: 829895144
        studios:
          type: string
          description: Semicolon-separated list of studios
          example: "Warner Bros.; Legendary Pictures"
        producers:
          type: string
          description: Semicolon-separated list of producers
          example: "Emma Thomas; Christopher Nolan"
        directors:
          type: string
          description: Semicolon-separated list of directors
          example: "Christopher Nolan"
        mpa_rating:
          type: string
          nullable: true
          example: "PG-13"
        collection:
          type: string
          nullable: true
          example: "The Dark Knight Collection"
        poster_url:
          type: string
          format: uri
          nullable: true
        backdrop_url:
          type: string
          format: uri
          nullable: true
        studio_logos:
          type: string
          description: Semicolon-separated list of studio logo urls
          nullable: true
        studio_countries:
          type: string
          description: Semicolon-separated list of studio countries
          nullable: true

        actor1_name:
          type: string
          nullable: true
        actor1_character:
          type: string
          nullable: true
        actor1_profile:
          type: string
          format: uri
          nullable: true
        actor2_name:
          type: string
          nullable: true
        actor2_character:
          type: string
          nullable: true
        actor2_profile:
          type: string
          format: uri
          nullable: true
        actor3_name:
          type: string
          nullable: true
        actor3_character:
          type: string
          nullable: true
        actor3_profile:
          type: string
          format: uri
          nullable: true
        actor4_name:
          type: string
          nullable: true
        actor4_character:
          type: string
          nullable: true
        actor4_profile:
          type: string
          format: uri
          nullable: true
        actor5_name:
          type: string
          nullable: true
        actor5_character:
          type: string
          nullable: true
        actor5_profile:
          type: string
          format: uri
          nullable: true
        actor6_name:
          type: string
          nullable: true
        actor6_character:
          type: string
          nullable: true
        actor6_profile:
          type: string
          format: uri
          nullable: true
        actor7_name:
          type: string
          nullable: true
        actor7_character:
          type: string
          nullable: true
        actor7_profile:
          type: string
          format: uri
          nullable: true
        actor8_name:
          type: string
          nullable: true
        actor8_character:
          type: string
          nullable: true
        actor8_profile:
          type: string
          format: uri
          nullable: true
        actor9_name:
          type: string
          nullable: true
        actor9_character:
          type: string
          nullable: true
        actor9_profile:
          type: string
          format: uri
          nullable: true
        actor10_name:
          type: string
          nullable: true
        actor10_character:
          type: string
          nullable: true
        actor10_profile:
          type: string
          format: uri
          nullable: true

    PagedMovies:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Movie'
        page:
          type: integer
          example: 1
        pageSize:
          type: integer
          example: 25
        total:
          type: integer
          example: 2371

    StatBucket:
      type: object
      properties:
        key:
          type: string
          example: "2010"
        count:
          type: integer
          example: 145

    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Movie not found"

security:
  - ApiKeyAuth: []

paths:
  /movies:
    get:
      summary: List movies
      description: >
        Returns movies with optional filters and pagination.
        Query parameters allow filtering by year, title, or genre.
      parameters:
        - in: query
          name: year
          schema:
            type: integer
            minimum: 1900
            maximum: 2100
          description: Filter by release year
        - in: query
          name: title
          schema:
            type: string
          description: Filter by title (partial match)
        - in: query
          name: genre
          schema:
            type: string
          description: Filter by genre name (exact match)
        - in: query
          name: page
          schema:
            type: integer
            default: 1
            minimum: 1
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 25
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: Successfully retrieved movies list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedMovies'
        '400':
          description: Invalid query parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a movie
      operationId: createMovie
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovieInput'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - ApiKeyAuth: []


  /movies/random:
    get:
      summary: Get random movies
      description: Returns a random selection of movies (default 10).
      responses:
        '200':
          description: Array of random movies
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Movie'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /movies/page:
    get:
      summary: Paginated list of movies with advanced filters
      description: >
        Returns a list of movies using a `page` number and `limit`.
        Supports detailed movie browsing through the movies/paged route, allowing filtering by several criteria to refine search results. Movies can be narrowed down by title, specific year or range of years, runtime length, genre, or MPA rating. Filters also include production details such as studios, producers, directors, and collections, as well as visual elements like poster or backdrop image links. Additionally, filtering can be applied to studio logos, studio countries, and actor names appearing in the cast. All of these options can be combined to locate specific kinds of movies, such as action films from a certain year featuring a particular actor, while also controlling how many results appear per page and which page of results to view for a smoother browsing experience.
    parameters:
      - in: query
        name: page
        required: false
        schema:
          type: integer
          default: 1
          minimum: 1
        description: Page number (starting from 1)
      - in: query
        name: limit
        required: false
        schema:
          type: integer
          default: 25
          minimum: 1
          maximum: 100
        description: Number of movies per page
      - in: query
        name: yearStart
        schema:
          type: integer
          minimum: 1900
          maximum: 2100
        description: Minimum release year
      - in: query
        name: yearEnd
        schema:
          type: integer
          minimum: 1900
          maximum: 2100
        description: Maximum release year
      - in: query
        name: year
        schema:
          type: integer
          minimum: 1900
          maximum: 2100
        description: Filter by specific release year
      - in: query
        name: runtimeMin
        schema:
          type: integer
          minimum: 0
        description: Minimum runtime in minutes
      - in: query
        name: runtimeMax
        schema:
          type: integer
          minimum: 0
        description: Maximum runtime in minutes
      - in: query
        name: title
        schema:
          type: string
        description: Filter by partial movie title match
      - in: query
        name: genre
        schema:
          type: string
        description: Filter by genre (exact match)
      - in: query
        name: mpaRating
        schema:
          type: string
        description: Filter by MPA rating (e.g., PG-13, R)
      - in: query
        name: studios
        schema:
          type: string
        description: Filter by studio name (case-insensitive)
      - in: query
        name: producers
        schema:
          type: string
        description: Filter by producer name (case-insensitive)
      - in: query
        name: directors
        schema:
          type: string
        description: Filter by director name (case-insensitive)
      - in: query
        name: collection
        schema:
          type: string
        description: Filter by movie collection name
      - in: query
        name: posterUrl
        schema:
          type: string
        description: Filter by poster image URL or partial match
      - in: query
        name: backdropUrl
        schema:
          type: string
        description: Filter by backdrop image URL or partial match
      - in: query
        name: studioLogos
        schema:
          type: string
        description: Filter by studio logo path or reference
      - in: query
        name: studioCountries
        schema:
          type: string
        description: Filter by studio country name
      - in: query
        name: actorNames
        schema:
          type: array
          items:
            type: string
        description: Filter by actor names (matches any in cast)
  responses:
      '200':
        description: Paginated movie results with applied filters
        content:
          application/json:
            schema:
              type: object
              properties:
                success: { type: boolean, example: true }
                page: { type: integer, example: 1 }
                limit: { type: integer, example: 25 }
                totalResults: { type: integer, example: 2470 }
                offset: { type: integer, example: 0 }
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/Movie'
      '400':
        description: Invalid query parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'

  /movies/stats:
    get:
      summary: Movie statistics
      description: Returns aggregated movie counts grouped by year or genre.
      parameters:
        - in: query
          name: by
          required: true
          schema:
            type: string
            enum: [year, genre]
          description: Grouping dimension
      responses:
        '200':
          description: Statistics results
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StatBucket'
        '400':
          description: Missing or invalid 'by' parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /movies/{id}:
    get:
      summary: Get movie details by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Numeric movie ID
      responses:
        '200':
          description: Single movie object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        '404':
          description: Movie not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a movie by id
      operationId: deleteMovie
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '204': { description: Deleted, no content }
        '404':
          description: Movie not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - ApiKeyAuth: [ ]
