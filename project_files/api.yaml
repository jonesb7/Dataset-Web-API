openapi: 3.0.3
info:
  title: Movies API
  version: 1.0.0
  description: |
    API for movies from the last 30 years.
    Provides routes for listing, retrieving, and analyzing movies.
    Supports filtering, pagination, and statistics grouped by year or genre.

servers:
  - url: https://dataset-web-api.onrender.com/api
    description: Render (production)
  - url: http://localhost:8000/api
    description: Local development

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key

  schemas:
    Movie:
      type: object
      required: [movie_id, title]
      properties:
        movie_id: { type: integer, example: 101 }
        title: { type: string, example: "Inception" }
        original_title: { type: string, nullable: true, example: "Inception" }
        release_date: { type: string, format: date, example: "2010-07-16" }
        runtime: { type: integer, example: 148, description: "minutes" }
        budget: { type: integer, nullable: true, example: 160000000 }
        revenue: { type: integer, nullable: true, example: 829895144 }
        mpa_rating: { type: string, nullable: true, example: "PG-13" }
        overview: { type: string, nullable: true }
        poster_url: { type: string, format: uri, nullable: true }
        backdrop_url: { type: string, format: uri, nullable: true }
        genres:
          type: array
          items: { type: string, example: "Science Fiction" }
        studios:
          type: array
          items:
            $ref: '#/components/schemas/StudioSummary'
        cast:
          type: array
          items:
            $ref: '#/components/schemas/CastMember'
        crew:
          type: array
          items:
            $ref: '#/components/schemas/CrewMember'

    StudioSummary:
      type: object
      properties:
        studio_id: { type: integer, example: 77 }
        name: { type: string, example: "Warner Bros." }
        country: { type: string, example: "US" }

    CastMember:
      type: object
      properties:
        person_id: { type: integer, example: 2001 }
        name: { type: string, example: "Leonardo DiCaprio" }
        character_name: { type: string, example: "Cobb" }

    CrewMember:
      type: object
      properties:
        person_id: { type: integer, example: 2002 }
        name: { type: string, example: "Christopher Nolan" }
        role: { type: string, example: "Director" }

    PagedMovies:
      type: object
      properties:
        data:
          type: array
          items: { $ref: '#/components/schemas/Movie' }
        page: { type: integer, example: 1 }
        pageSize: { type: integer, example: 25 }
        total: { type: integer, example: 2371 }

    StatBucket:
      type: object
      properties:
        key: { type: string, example: "2010" }
        count: { type: integer, example: 145 }

    Error:
      type: object
      properties:
        success: { type: boolean, example: false }
        message: { type: string, example: "Movie not found" }

security:
  - ApiKeyAuth: []

paths:
  /movies:
    get:
      summary: List movies
      description: |
        Returns movies with optional filters and pagination.
        Query parameters allow filtering by year, title, or genre.
      parameters:
        - in: query
          name: year
          schema: { type: integer, minimum: 1900, maximum: 2100 }
          description: Filter by release year
        - in: query
          name: title
          schema: { type: string }
          description: Filter by title (partial match)
        - in: query
          name: genre
          schema: { type: string }
          description: Filter by genre name
        - in: query
          name: page
          schema: { type: integer, default: 1, minimum: 1 }
        - in: query
          name: pageSize
          schema: { type: integer, default: 25, minimum: 1, maximum: 100 }
      responses:
        '200':
          description: Successfully retrieved movies list
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PagedMovies' }
        '400':
          description: Invalid query parameters
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /movies/random:
    get:
      summary: Get random movies
      description: Returns a random selection of movies (default 10).
      responses:
        '200':
          description: Array of random movies
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Movie' }
        '500':
          description: Server error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /movies/page:
    get:
      summary: Paginated list of movies with advanced filters
      description: |
        Returns a list of movies using a `page` number and `limit`.
        Supports advanced filtering by release year range, budget, revenue, runtime, genre, and MPA rating.
      parameters:
        - in: query
          name: page
          required: false
          schema: { type: integer, default: 1, minimum: 1 }
          description: Page number (starting from 1)
        - in: query
          name: limit
          required: false
          schema: { type: integer, default: 25, minimum: 1, maximum: 100 }
          description: Number of movies per page
        - in: query
          name: yearStart
          schema: { type: integer, minimum: 1900, maximum: 2100 }
          description: Minimum release year
        - in: query
          name: yearEnd
          schema: { type: integer, minimum: 1900, maximum: 2100 }
          description: Maximum release year
        - in: query
          name: budgetLow
          schema: { type: integer, minimum: 0 }
          description: Minimum budget
        - in: query
          name: budgetHigh
          schema: { type: integer, minimum: 0 }
          description: Maximum budget
        - in: query
          name: revenueLow
          schema: { type: integer, minimum: 0 }
          description: Minimum revenue
        - in: query
          name: revenueHigh
          schema: { type: integer, minimum: 0 }
          description: Maximum revenue
        - in: query
          name: runtimeLow
          schema: { type: integer, minimum: 0 }
          description: Minimum runtime (in minutes)
        - in: query
          name: runtimeHigh
          schema: { type: integer, minimum: 0 }
          description: Maximum runtime (in minutes)
        - in: query
          name: genre
          schema: { type: string }
          description: Filter by genre (exact match)
        - in: query
          name: mpaRating
          schema: { type: string }
          description: Filter by MPA rating (e.g., PG-13, R)
      responses:
        '200':
          description: Paginated movie results with applied filters
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  page: { type: integer, example: 1 }
                  limit: { type: integer, example: 10 }
                  offset: { type: integer, example: 0 }
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Movie'
        '400':
          description: Invalid query parameters
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /movies/stats:
    get:
      summary: Movie statistics
      description: Returns aggregated movie counts grouped by year or genre.
      parameters:
        - in: query
          name: by
          required: true
          schema:
            type: string
            enum: [year, genre]
          description: Grouping dimension
      responses:
        '200':
          description: Statistics results
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/StatBucket' }
        '400':
          description: Missing or invalid 'by' parameter
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /movies/{id}:
    get:
      summary: Get movie details by ID
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
          description: Numeric movie ID
      responses:
        '200':
          description: Single movie object
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Movie' }
        '404':
          description: Movie not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
