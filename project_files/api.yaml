openapi: 3.0.3
info:
  title: Movies API
  version: 1.0.0
  description: >
    API for movies from the last 30 years.
    Implements list, details, and basic statistics by year/genre.
servers:
  - url: http://localhost:8000/api
    description: Local dev

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key

  schemas:
    Movie:
      type: object
      required: [movie_id, title]
      properties:
        movie_id: { type: integer, example: 101 }
        title: { type: string, example: "Inception" }
        original_title: { type: string, nullable: true }
        release_date: { type: string, format: date, example: "2010-07-16" }
        runtime: { type: integer, example: 148, description: "minutes" }
        budget: { type: integer, nullable: true, example: 160000000 }
        revenue: { type: integer, nullable: true, example: 829895144 }
        mpa_rating: { type: string, nullable: true, example: "PG-13" }
        overview: { type: string, nullable: true }
        poster_url: { type: string, format: uri, nullable: true }
        backdrop_url: { type: string, format: uri, nullable: true }
        genres:
          type: array
          items: { type: string, example: "Science Fiction" }
        studios:
          type: array
          items:
            $ref: '#/components/schemas/StudioSummary'
        cast:
          type: array
          description: "Top-billed cast"
          items:
            $ref: '#/components/schemas/CastMember'
        crew:
          type: array
          description: "Key crew (optional)"
          items:
            $ref: '#/components/schemas/CrewMember'

    StudioSummary:
      type: object
      properties:
        studio_id: { type: integer, example: 77 }
        name: { type: string, example: "Warner Bros." }
        country: { type: string, example: "US" }
        logo_url: { type: string, format: uri, nullable: true }

    CastMember:
      type: object
      properties:
        person_id: { type: integer, example: 2001 }
        name: { type: string, example: "Leonardo DiCaprio" }
        character_name: { type: string, example: "Cobb" }
        cast_order: { type: integer, example: 1 }
        profile_url: { type: string, format: uri, nullable: true }

    CrewMember:
      type: object
      properties:
        person_id: { type: integer, example: 2002 }
        name: { type: string, example: "Christopher Nolan" }
        role: { type: string, example: "Director" }
        profile_url: { type: string, format: uri, nullable: true }

    PagedMovies:
      type: object
      properties:
        items:
          type: array
          items: { $ref: '#/components/schemas/Movie' }
        page: { type: integer, example: 1 }
        pageSize: { type: integer, example: 20 }
        total: { type: integer, example: 2371 }

    StatBucket:
      type: object
      properties:
        key: { type: string, example: "2010" }
        count: { type: integer, example: 145 }

    Error:
      type: object
      properties:
        error: { type: string, example: "Movie not found" }

security:
  - ApiKeyAuth: []

paths:
  /movies:
    get:
      summary: List movies
      description: >
        Returns movies with optional filters and pagination.
      parameters:
        - in: query
          name: year
          schema: { type: integer, minimum: 1900, maximum: 2100 }
          description: Filter by release year
        - in: query
          name: title
          schema: { type: string }
          description: Partial title search
        - in: query
          name: genre
          schema: { type: string }
          description: Filter by genre name
        - in: query
          name: page
          schema: { type: integer, default: 1, minimum: 1 }
        - in: query
          name: pageSize
          schema: { type: integer, default: 20, minimum: 1, maximum: 100 }
      responses:
        '200':
          description: Paged list of movies
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PagedMovies' }
              examples:
                sample:
                  summary: Example response
                  value:
                    page: 1
                    pageSize: 2
                    total: 2371
                    items:
                      - movie_id: 101
                        title: "Inception"
                        release_date: "2010-07-16"
                        genres: ["Science Fiction", "Action"]
                        runtime: 148
                      - movie_id: 102
                        title: "The Matrix"
                        release_date: "1999-03-31"
                        genres: ["Science Fiction"]
                        runtime: 136
        '400':
          description: Invalid query
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /movies/{id}:
    get:
      summary: Get movie details
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Movie document
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Movie' }
        '404':
          description: Movie not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /movies/stats:
    get:
      summary: Movie statistics
      description: Aggregations by year or genre.
      parameters:
        - in: query
          name: by
          required: true
          schema:
            type: string
            enum: [year, genre]
          description: Grouping dimension
      responses:
        '200':
          description: List of (key, count) buckets
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/StatBucket' }
        '400':
          description: Missing or invalid 'by' parameter
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /movies/random:
    get:
      summary: Get random movies
      description: Returns a random selection of movies (e.g. 10).
      responses:
        '200':
          description: Random movie list
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Movie' }
        '500':
          description: Internal error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
